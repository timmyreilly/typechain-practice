/* GENERATED BY TYPECHAIN VER. 0.2.1 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
  DeferredEventWrapper
} from "./typechain-runtime";

export class DumbContract extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "arrayParamLength",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "someAddress",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "counter",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "counterArray",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "SOME_VALUE",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "from", type: "address" },
          { indexed: false, name: "value", type: "uint256" }
        ],
        name: "Deposit",
        type: "event"
      },
      {
        constant: true,
        inputs: [{ name: "offset", type: "uint256" }],
        name: "counterWithOffset",
        outputs: [{ name: "sum", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "returnAll",
        outputs: [{ name: "", type: "uint256" }, { name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "offset", type: "uint256" }],
        name: "countup",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "countupForEther",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "", type: "uint8" },
          { name: "", type: "uint8" },
          { name: "ret", type: "uint256" }
        ],
        name: "twoUnnamedArgs",
        outputs: [{ name: "", type: "uint256" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "arrayParam", type: "uint256[]" }],
        name: "callWithArray",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<DumbContract> {
    const contract = new DumbContract(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get arrayParamLength(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.arrayParamLength, []);
  }
  public get someAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.someAddress, []);
  }
  public get counter(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.counter, []);
  }
  public get SOME_VALUE(): Promise<boolean> {
    return promisify(this.rawWeb3Contract.SOME_VALUE, []);
  }
  public counterArray(arg0: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.counterArray, [arg0.toString()]);
  }
  public counterWithOffset(offset: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.counterWithOffset, [
      offset.toString()
    ]);
  }
  public returnAll(): Promise<[BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.returnAll, []);
  }

  public countupTx(
    offset: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "countup", [
      offset.toString()
    ]);
  }
  public countupForEtherTx(): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "countupForEther",
      []
    );
  }
  public twoUnnamedArgsTx(
    arg0: BigNumber | number,
    arg1: BigNumber | number,
    ret: BigNumber | number
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "twoUnnamedArgs",
      [arg0.toString(), arg1.toString(), ret.toString()]
    );
  }
  public callWithArrayTx(
    arrayParam: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "callWithArray", [
      arrayParam.map(val => val.toString())
    ]);
  }

  public DepositEvent(eventFilter: {
    from?: BigNumber | string | Array<BigNumber | string>;
  }): DeferredEventWrapper<
    { from: BigNumber | string; value: BigNumber | number },
    { from?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new DeferredEventWrapper<
      { from: BigNumber | string; value: BigNumber | number },
      { from?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Deposit", eventFilter);
  }
}
